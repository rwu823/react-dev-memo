version: 2.1

vars:
  branch_master: &branch_master
    filters:
      branches:
        only: master

  branch_testing: &branch_testing
    filters:
      branches:
        ignore:
          - /^prod\//
          - master

executors:
  node:
    environment:
      - TZ: Asia/Taipei
    docker:
      - image: circleci/node:12

commands:
    setup_npm:
      parameters:
        token:
          type: string
          default: $NPM_TOKEN
      steps:
        - run:
            name: Setup NPM
            command: echo "//registry.npmjs.org/:_authToken=<<parameters.token>>" >> ~/.npmrc

    deploy_npm:
      parameters:
        dir:
          type: string
          default: out
      steps:
        - setup_npm
        - run: npm publish << parameters.dir >>

    setup_git:
      parameters:
        user:
          type: string
          default: Rocky Wu
        email :
          type: string
          default : rwu823@gmail.com
      steps:
        - run:
            name: Setup Git
            command: |
              git config --global user.name '<<parameters.user>>'
              git config --global user.email '<<parameters.email>>'
    push_tag:
      parameters:
        tag:
          type: string
          default: $GIT_TAG
        repo:
          type: string
          default: $TOKEN_REPO
      steps:
        - setup_git
        - run:
            name: Push git tag << parameters.tag >>
            command: |
              git tag $GIT_TAG
              git push --quiet << parameters.repo >> << parameters.tag >>

    push_branch:
      parameters:
        tag:
          type: string
          default: $GIT_TAG
        dir:
          type: string
          default: out
        repo:
          type: string
          default: $TOKEN_REPO
        force:
            type: boolean
            default: false
        branch:
          type: string
          default: $GIT_TAG
      steps:
        - setup_git
        - run:
            name: Push to << parameters.branch >>
            command: |
              cd << parameters.dir >>
              git init
              git add -A
              git commit -nm "<< parameters.tag >>"

              git checkout -b << parameters.branch >>
              git push --quiet <<# parameters.force >> -f <</ parameters.force >> << parameters.repo >> HEAD

              rm -rf .git

    checkout_install:
      description: Checkout sources and install node_modules
      steps:
        - checkout
        - restore_cache:
            key: node_modules#{{ checksum "yarn.lock" }}
        - run: yarn
        - save_cache:
            key: node_modules#{{ checksum "yarn.lock" }}
            paths:
              - node_modules
        - run: git checkout -- .
        - run:
            name: Init Submodule
            command: git submodule update --init --remote --depth 1
        - run:
            name: Exports Env
            command: |
              echo "$(node env/export)" >> $BASH_ENV
              echo 'export PATH="$(yarn global bin):$PATH"' >> $BASH_ENV

              source $BASH_ENV

jobs:
  deploy-gh:
    executor: node
    steps:
      - checkout_install
      - restore_cache:
          key: build#{{ .Revision }}
      - push_branch:
          dir: gh-pages
          branch: gh-pages
          force: true

  deploy-npm:
    executor: node
    steps:
      - checkout_install
      - restore_cache:
          key: build#{{ .Revision }}
      - deploy_npm

  push-git-tag:
    executor: node
    steps:
      - checkout_install
      - push_tag

  build:
    executor: node
    steps:
      - checkout_install
      - run: yarn build
      - save_cache:
          key: build#{{ .Revision }}
          paths:
            - out
            - gh-pages

  test:
    executor: node
    steps:
      - checkout_install
      - run: npx jest --coverage
      - run: bash <(curl -s https://codecov.io/bash)

  lint:
    executor: node
    steps:
      - checkout_install
      - run:
          name: Run ESLint only on modified files.
          command: npx eslint $(git diff --diff-filter=d origin/HEAD --name-only --cached '*.ts' '*.tsx' '*.js')

workflows:
  version: 2

  Deploy:
    jobs:
      - build:
          <<: *branch_master
      - test:
          <<: *branch_master
      - push-git-tag:
          <<: *branch_master
          requires:
            - test
            - build
      - deploy-gh:
          <<: *branch_master
          requires:
            - test
            - build
      - deploy-npm:
          <<: *branch_master
          requires:
            - test
            - build
  Test:
    jobs:
      - test:
          <<: *branch_testing
      - lint:
          <<: *branch_testing

